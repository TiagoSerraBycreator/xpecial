const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function testAuthQuery() {
  try {
    console.log('üîç Testando consulta exata da autentica√ß√£o...');
    
    // Esta √© a consulta exata que est√° sendo usada no auth.ts
    const user = await prisma.user.findUnique({
      where: {
        email: 'admin@xpecial.com'
      },
      include: {
        candidate: true,
        company: true
      }
    });
    
    console.log('üìä Resultado da consulta:');
    if (user) {
      console.log('‚úÖ Usu√°rio encontrado:');
      console.log(`   üìß Email: ${user.email}`);
      console.log(`   üë§ Nome: ${user.name}`);
      console.log(`   üîë ID: ${user.id}`);
      console.log(`   üîê Role: ${user.role}`);
      console.log(`   ‚úÖ Ativo: ${user.isActive}`);
      console.log(`   üì¨ Email verificado: ${user.isEmailVerified}`);
      console.log(`   üë§ Candidato: ${user.candidate ? 'Sim' : 'N√£o'}`);
      console.log(`   üè¢ Empresa: ${user.company ? 'Sim' : 'N√£o'}`);
    } else {
      console.log('‚ùå Usu√°rio N√ÉO encontrado!');
    }
    
    // Vamos tamb√©m testar uma consulta mais simples
    console.log('\nüîç Testando consulta simples...');
    const simpleUser = await prisma.user.findUnique({
      where: {
        email: 'admin@xpecial.com'
      }
    });
    
    if (simpleUser) {
      console.log('‚úÖ Consulta simples: Usu√°rio encontrado');
    } else {
      console.log('‚ùå Consulta simples: Usu√°rio N√ÉO encontrado');
    }
    
    // Vamos listar todos os usu√°rios para verificar
    console.log('\nüìã Listando todos os usu√°rios:');
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        isActive: true,
        isEmailVerified: true
      }
    });
    
    console.log(`üìä Total de usu√°rios: ${allUsers.length}`);
    allUsers.forEach((u, index) => {
      console.log(`   ${index + 1}. ${u.email} (${u.name}) - Ativo: ${u.isActive}, Verificado: ${u.isEmailVerified}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro na consulta:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAuthQuery();